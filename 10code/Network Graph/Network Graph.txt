import tensorflow as tf
from tensorflow.keras import layers
import matplotlib.pyplot as plt
import networkx as nx
import numpy as np


vocab_size = 10000
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.imdb.load_data(num_words=vocab_size)


max_length = 200
x_train = tf.keras.preprocessing.sequence.pad_sequences(x_train, maxlen=max_length)
x_test = tf.keras.preprocessing.sequence.pad_sequences(x_test, maxlen=max_length)


model = tf.keras.Sequential([
    layers.Embedding(vocab_size, 64, input_length=max_length),
    layers.LSTM(64),
    layers.Dense(64, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])


model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])


history = model.fit(x_train, y_train, epochs=3, batch_size=128, validation_split=0.2)


loss, accuracy = model.evaluate(x_test, y_test)
print(f'\nTest Accuracy: {accuracy:.4f}')


predictions = (model.predict(x_test[:100]) > 0.5).astype(int).flatten()
true_labels = y_test[:100]


G = nx.Graph()

for i in range(len(predictions)):
    sentiment = "Positive" if predictions[i] == 1 else "Negative"
    color = 'green' if sentiment == "Positive" else 'red'
    G.add_node(f'Review {i+1}', sentiment=sentiment, color=color)


for i in range(len(predictions)-1):
    G.add_edge(f'Review {i+1}', f'Review {i+2}')


colors = [G.nodes[node]['color'] for node in G.nodes()]
plt.figure(figsize=(12,8))
nx.draw(G, with_labels=True, node_color=colors, node_size=500, font_size=8)
plt.title('Sentiment Classification of Reviews (Green=Positive, Red=Negative)')
plt.show()


